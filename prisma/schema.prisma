// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum OperationType {
  INCOME
  EXPENSE
}

enum BudgetType {
  PERCENTAGE
  MONETARY
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  name            String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  operations      Operation[]
  monthlyIncomes  MonthlyIncome[]
  ownedAccounts   SharedAccountAccess[] @relation("OwnerAccounts")
  memberAccounts  SharedAccountAccess[] @relation("MemberAccounts")
  importSessions  ImportSession[]
  envelopes       Envelope[]
}

model Envelope {
  id          String     @id @default(uuid())
  name        String
  userId      String?
  user        User?      @relation(fields: [userId], references: [id])
  value       Int
  type        BudgetType
  isDeletable Boolean    @default(true)
  isGlobal    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  operations  Operation[]
}

model Operation {
  id              String            @id @default(cuid())
  userId          String
  date            DateTime
  description     String
  amount          Int               // Stored in cents
  type            OperationType
  envelopeId      String
  status          TransactionStatus @default(COMPLETED)
  scheduledAt     DateTime?
  processedAt     DateTime?
  importSessionId String?
  importSession   ImportSession?    @relation(fields: [importSessionId], references: [id])

  envelope        Envelope          @relation(fields: [envelopeId], references: [id])
  user            User              @relation(fields: [userId], references: [id])
}

enum TransactionStatus {
  COMPLETED
  PENDING
  SCHEDULED
}

model ImportSession {
  id              String    @id @default(cuid())
  userId          String
  createdAt       DateTime @default(now())
  fileName        String
  importedCount   Int      @default(0)
  ignoredCount    Int      @default(0)
  errorCount      Int      @default(0)
  transactions    Operation[]
  errors          Json?
  previewItems    ImportTransactionPreview[]

  user            User     @relation(fields: [userId], references: [id])
}

model ImportTransactionPreview {
  id              String   @id @default(cuid())
  importSessionId String
  status          PreviewStatus
  resolved        Boolean @default(false)
  data            Json

  importSession   ImportSession @relation(fields: [importSessionId], references: [id])
}

enum PreviewStatus {
  NEW
  PENDING
  DUPLICATE
  ERROR
  CONFIRMED
}

model MonthlyIncome {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  month     Int
  year      Int
  fixed     Int
  variable  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, month, year])
}



model SharedAccountAccess {
  id        String   @id @default(uuid())
  ownerId   String
  owner     User     @relation("OwnerAccounts", fields: [ownerId], references: [id])
  memberId  String
  member    User     @relation("MemberAccounts", fields: [memberId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([ownerId, memberId])
}
